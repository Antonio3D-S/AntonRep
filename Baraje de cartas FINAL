#include <iostream>
#include <vector>
#include <algorithm>
#include <random>
#include <iomanip>  // Necesario para setw


using namespace std;


struct Carta {
    int TIPO;
    int NUM;
};


const int k = 6;
const int totalCartas = 52;
const int totalPalo = 13;

// Función para imprimir una carta con delimitadores alineados.
void ImprimirCarta(const Carta& c, int ancho) {
    const char* nombresPalo[] = {"Espadas", "Tréboles", "Diamantes", "Corazones"};
    const char* numStr = (c.NUM == 1) ? "A" : (c.NUM == 11) ? "J" : (c.NUM == 12) ? "Q" : (c.NUM == 13) ? "K" : to_string(c.NUM).c_str();

    // Imprimir con delimitadores alineados
    cout << " | " << setw(ancho) << left << numStr << " de " << setw(ancho) << left << nombresPalo[c.TIPO - 1] << " | ";
}
// Función para imprimir un vector de cartas.
void ImprimirVector(const vector<Carta>& vector, string mensaje) {
    cout << mensaje << endl;
    for (const auto& carta : vector) {
        ImprimirCarta(carta,10);
        cout << endl;
    }
    cout << endl << endl;
}


vector<Carta> Obtener(const vector<Carta>& vectorial, size_t n) {
    vector<Carta> vect;
    // Obtén el tamaño máximo del vector
    size_t maxSize = vectorial.size();


    // Asegúrate de que n no sea mayor que el tamaño máximo del vector
    n = min(n, maxSize);


    for (size_t i = maxSize - n; i < maxSize; ++i) {
        vect.push_back(vectorial[i]);
    }


    return vect;
}
bool Evaluar(const vector<Carta>& solucionActual, const Carta& cartaSeleccionada) {
    size_t numUltimasCartas = min(solucionActual.size(), static_cast<size_t>(k));
    auto ultimasCartas = Obtener(solucionActual, numUltimasCartas);


    return any_of(ultimasCartas.begin(), ultimasCartas.end(), [&](const Carta& carta) {
        return carta.NUM == cartaSeleccionada.NUM;
    });
}
vector<Carta> DesordenarCartas(const vector<Carta>& cartasOrdenadas) {
    vector<Carta> solucion;
    solucion.reserve(cartasOrdenadas.size());


    vector<Carta> cartasShuffle = cartasOrdenadas;  // Crear una copia para hacer shuffle


    random_device rd;
    mt19937 gen(rd());


    for (const auto& carta : cartasOrdenadas) {
        // Barajar las cartas
        shuffle(cartasShuffle.begin(), cartasShuffle.end(), gen);


        // Seleccionar la primera carta válida y añadirla a solucion
        auto it = find_if(cartasShuffle.begin(), cartasShuffle.end(), [&](const Carta& c) {
            return !Evaluar(solucion, c);
        });


        if (it != cartasShuffle.end()) {
            solucion.push_back(*it);
            cartasShuffle.erase(it);  // Eliminar la carta seleccionada de cartasShuffle
        }


        cout << ".";
    }


    return solucion;
}




//// Función para inicializar el vector de cartas con todas las cartas del mazo.
void InicializarMazo(vector<Carta>& mazo) {
    for (int i = 1; i <= totalPalo; i++) {
        mazo.push_back({1, i});
        mazo.push_back({2, i});
        mazo.push_back({3, i});
        mazo.push_back({4, i});
    }


    ImprimirVector(mazo, "Mazo Inicial: ");
}


// Función para reiniciar el juego.
void IniciarJuego() {
    vector<Carta> cartasOrdenadas;


    // Inicializar cartasOrdenadas con todas las cartas del mazo
    InicializarMazo(cartasOrdenadas);


    char opcion;
    do {
        // Desordenar cartas y mostrar resultados
        vector<Carta> cartasDesordenadas = DesordenarCartas(cartasOrdenadas);


        // Imprimir cartas ordenadas
        ImprimirVector(cartasOrdenadas, "Cartas Ordenadas:");


        // Imprimir cartas desordenadas
        ImprimirVector(cartasDesordenadas, "Cartas Desordenadas:");


        // Preguntar al jugador si desea seguir barajando
        cout << "¿Quieres seguir barajando? (Y para continuar, otro caracter para terminar el juego): ";
        cin >> opcion;


        // Limpiar la pantalla antes de la siguiente jugada
        system("cls || clear");


    } while (toupper(opcion) == 'Y');
}


int main() {
   
    IniciarJuego();


    return 0;
}




