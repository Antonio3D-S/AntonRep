#include <iostream>
#include <string>
#include <map>
#include <cctype>

using namespace std;

bool EsNumeroValido(string str) {
    if (str.length() != 1) {
        return false;
    }

    char c = str[0];
    return (c == '0' || c == '1');
}

struct FrecuenciaCaracteres {
    map<char, int> frecuenciaCaracteres;
    int totalCaracteres = 0;

    void contarFrecuencias(const string& texto, bool soloNumerosYLetras, bool incluirEspacios) {
        for (char caracter : texto) {
            if ((!soloNumerosYLetras || (isdigit(caracter) || isalpha(caracter))) && (incluirEspacios || !isspace(caracter))) {
                frecuenciaCaracteres[caracter]++;
                totalCaracteres++;
            }
        }
    }

    void mostrarResultados() const {
        int total = frecuenciaCaracteres.size();
        cout << "Total de caracteres de la cadena [" << total <<"]"<< endl;
        cout << "Frecuencia de cada caracter en el texto:" << endl;

        for (const auto& entry : frecuenciaCaracteres) {
            char caracter = entry.first;
            int apariciones = entry.second;
            double porcentaje = (static_cast<double>(apariciones) / totalCaracteres) * 100;
            cout << "El caracter '" << caracter << "' aparece [" << apariciones <<"] veces, con un porcentaje de: " << porcentaje << "%" << endl;
        }
    }
};

int main() {
    cout << "Ingrese un texto: ";
    string texto;
    getline(cin, texto);

    string opcionNumerosLetras;
    do {
        cout << "¿Desea aceptar todos los caracteres (0) o solo números y letras (1)? ";
        cin >> opcionNumerosLetras;
    } while (!EsNumeroValido(opcionNumerosLetras));

    string opcionEspacios;
    do {
        cout << "¿Desea incluir espacios (1) o excluirlos (0)? ";
        cin >> opcionEspacios;
    } while (!EsNumeroValido(opcionEspacios));

    FrecuenciaCaracteres frecuencia;
    frecuencia.contarFrecuencias(texto, opcionNumerosLetras == "1", opcionEspacios == "1");
    frecuencia.mostrarResultados();

    return 0;
}
